using System.Collections.Generic;
using System.Text;
using System.Xml;
using Webpay.Integration.CSharp.Hosted.Payment;
using Webpay.Integration.CSharp.Order.Create;
using Webpay.Integration.CSharp.Util.Constant;
using Webpay.Integration.CSharp.Util.Xml;
using Webpay.Integration.CSharp.WebpayWS;

namespace Webpay.Integration.CSharp.Hosted.Helper
{
    public class HostedXmlBuilder
    {
        private XmlWriter _xmlw;

        public string GetXml(HostedPayment payment)
        {
            var xmlOutput = new Utf8StringWriter(Encoding.UTF8);
            CreateOrderBuilder order = payment.GetCreateOrderBuilder();
            List<HostedOrderRowBuilder> rows = payment.GetRowBuilder();

            var xmlSettings = new XmlWriterSettings
                {
                    Encoding = Encoding.UTF8
                };

            using (_xmlw = XmlWriter.Create(xmlOutput, xmlSettings))
            {
                _xmlw.WriteStartDocument();
                _xmlw.WriteComment("Message generated by Integration package C#");
                _xmlw.WriteStartElement("payment");

                _xmlw = payment.GetPaymentSpecificXml(_xmlw);
                WriteSimpleElement("customerrefno", order.GetClientOrderNumber());
                WriteSimpleElement("currency", order.GetCurrency());
                WriteSimpleElement("amount", payment.GetAmount().ToString());
                WriteSimpleElement("vat", payment.GetVat().ToString());
                WriteSimpleElement("lang", payment.GetPayPageLanguageCode().ToLower());
                WriteSimpleElement("returnurl", payment.GetReturnUrl());
                WriteSimpleElement("cancelurl", payment.GetCancelUrl());
                WriteSimpleElement("iscompany", order.GetIsCompanyIdentity() ? "true" : "false");
                
                SerializeCustomer(order);

                SerializeRows(rows);

                if (payment.GetExcludedPaymentMethod() != null)
                {
                    _xmlw.WriteStartElement("excludepaymentMethods");

                    List<string> excludeList = payment.GetExcludedPaymentMethod();
                    foreach (string str in excludeList)
                    {
                        WriteSimpleElement("exclude", str);
                    }

                    _xmlw.WriteEndElement();
                }

                WriteSimpleElement("addinvoicefee", "false");
                _xmlw.WriteEndDocument();
            }

            return xmlOutput.ToString();
        }

        private void SerializeCustomer(CreateOrderBuilder order)
        {
            CustomerIdentity customer;

            if (order.GetIsCompanyIdentity())
            {
                customer = order.GetCompanyCustomer();
            }
            else
            {
                customer = order.GetIndividualCustomer();
            }

            _xmlw.WriteStartElement("customer");

            if (customer.NationalIdNumber != null) //nordic country individual customer type
            {
                WriteSimpleElement("ssn", customer.NationalIdNumber);
            }
            else if (!order.GetIsCompanyIdentity()) //euro country individual
            {
                WriteSimpleElement("ssn", customer.IndividualIdentity.BirthDate);
            }
            else if (order.GetIsCompanyIdentity() && !order.GetCountryCode().Equals(CountryCode.SE))//euro country, Company customer and nationalId not set
            {
                WriteSimpleElement("ssn", customer.CompanyIdentity.CompanyVatNumber);
            }

            //Individual customer
            if (!order.GetIsCompanyIdentity())
            {
                IndividualIdentity individualIdentity = customer.IndividualIdentity;

                if (individualIdentity != null)
                {
                    if (individualIdentity.FirstName != null)
                    {
                        WriteSimpleElement("firstname", individualIdentity.FirstName);
                    }

                    if (individualIdentity.LastName != null)
                    {
                        WriteSimpleElement("lastname", individualIdentity.LastName);
                    }

                    if (individualIdentity.Initials != null)
                    {
                        WriteSimpleElement("initials", individualIdentity.Initials);
                    }
                }
            }
            //Company customer
            else
            {
                if (customer.FullName != null)
                {
                    WriteSimpleElement("firstname", customer.FullName);
                }
            }

            if (customer.PhoneNumber != null)
            {
                WriteSimpleElement("phone", customer.PhoneNumber);
            }

            if (customer.Email != null)
            {
                WriteSimpleElement("email", customer.Email);
            }

            if (customer.Street != null)
            {
                WriteSimpleElement("address", customer.Street);
            }

            if (customer.HouseNumber != null)
            {
                WriteSimpleElement("housenumber", customer.HouseNumber);
            }

            if (customer.CoAddress != null)
            {
                WriteSimpleElement("address2", customer.CoAddress);
            }

            if (customer.ZipCode != null)
            {
                WriteSimpleElement("zip", customer.ZipCode);
            }

            if (customer.Locality != null)
            {
                WriteSimpleElement("city", customer.Locality);
            }

            if (order.GetCountryCode() != 0)
            {
                WriteSimpleElement("country", order.GetCountryCode().ToString().ToUpper());
            }

            _xmlw.WriteEndElement();

            if (order.GetIsCompanyIdentity())
            {
                if (order.GetCompanyCustomer().GetIpAddress() != null)
                {
                    WriteSimpleElement("ipaddress", order.GetCompanyCustomer().GetIpAddress());
                }
            }
            else
            {
                if (order.GetIndividualCustomer().GetIpAddress() != null)
                {
                    WriteSimpleElement("ipaddress", order.GetIndividualCustomer().GetIpAddress());
                }
            }
        }

        /// <summary>
        /// SerializeRows
        /// </summary>
        /// <param name="rows"></param>
	    private void SerializeRows(List<HostedOrderRowBuilder> rows)
        {
            if (rows == null || rows.Count == 0) 
            {
                return;
            }
        
            _xmlw.WriteStartElement("orderrows");
        
            foreach(HostedOrderRowBuilder row in rows) 
            {
                SerializeRow(row);
            }
        
            _xmlw.WriteEndElement();
        }

        /// <summary>
        /// SerializeRow
        /// </summary>
        /// <param name="row"></param>
        private void SerializeRow(HostedOrderRowBuilder row)
        {
            _xmlw.WriteStartElement("row");
        
            WriteSimpleElement("sku", row.GetSku());
            WriteSimpleElement("name", row.GetName());
            WriteSimpleElement("description", row.GetDescription());
        
            WriteSimpleElement("amount", row.GetAmount().ToString());
            WriteSimpleElement("vat", row.GetVat().ToString());
        
            if (row.GetQuantity() != 0) 
            {
                WriteSimpleElement("quantity", row.GetQuantity().ToString());
            }

            WriteSimpleElement("unit", row.GetUnit());
        
            _xmlw.WriteEndElement();
        }

        private void WriteSimpleElement(string name, string value)
        {
            if (value == null)
            {
                return;
            }

            _xmlw.WriteStartElement(name);

            if (!value.Equals(""))
            {
                _xmlw.WriteChars(value.ToCharArray(), 0, value.ToCharArray().Length);
            }
            _xmlw.WriteEndElement();
        }
    }
}